---------------------------------------------------------------------
                     SARUWATARI INSTRUCTION SET                       
---------------------------------------------------------------------
#####################################################################
------------+----------------+------------+------------+-------------
I-TYPE (00) | OPCODE (6 bit) | RS (5 bit) | RD (5 bit) | IMM (16 bit)
------------+----------------+------------+------------+-------------
       addi |         000000 |      Reg(RD) = Reg(RS) + ext_sign(IMM)
------------+----------------+---------------------------------------
       subi |         000001 |      Reg(RD) = Reg(RS) - ext_sign(IMM)
------------+----------------+---------------------------------------
         lw |         000010 | Reg(RD) = Mem(Reg(RS) + ext_sign(IMM))
------------+----------------+---------------------------------------
         sw |         000011 |      Mem(RS + ext_sign(IMM)) = Reg(RD)
------------+----------------+---------------------------------------
       beqz |         000100 |           if (RS == 0) -> PC + 4 + IMM **
------------+----------------+---------------------------------------
       beqz |         000101 |           if (RS != 0) -> PC + 4 + IMM **
------------+----------------+---------------------------------------
      multi |         000110 |      Reg(RD) = Reg(RS) * ext_sign(IMM)
------------+----------------+---------------------------------------
#####################################################################
------------+----------------+------------+------------+-------------
R-TYPE (01) | OPCODE (6 bit) | RS1(5 bit) | RS2(5 bit) | RD (5 bit)
------------+----------------+------------+------------+-------------
        add |         010000 |          Reg(RD) = Reg(RS1) + Reg(RS2)                 
------------+----------------+---------------------------------------
        sub |         010001 |          Reg(RD) = Reg(RS1) - Reg(RS2)                                    
------------+----------------+---------------------------------------
       mult |         010010 |          Reg(RD) = Reg(RS1) * Reg(RS2)                          
------------+----------------+---------------------------------------
        slt |         010011 | if (Reg(RS1) < Reg(RS2)) -> Reg(RD) = 1 else 0                            
------------+----------------+---------------------------------------
        sgt |         010100 | if (Reg(RS1) > Reg(RS2)) -> Reg(RD) = 1 else 0                                      
------------+----------------+---------------------------------------
        div |         010101 |          Reg(RD) = Reg(RS1) / Reg(RS2)                                      
------------+----------------+---------------------------------------
#####################################################################
------------+----------------+---------------------------------------
J-TYPE (10) | OPCODE (6 bit) |                           name(26 bit)
------------+----------------+---------------------------------------
          j |         100000 |                              PC = name
------------+----------------+---------------------------------------
        jal |         100001 |                   r31 = PC; PC = name;
------------+----------------+---------------------------------------

** IMM, in questo caso, e` un offset (positivo o negativo) rispetto all'attuale 
   program counter.
